
// Copyright (c) 2010-2019 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__detail__io__serialization_exceptions_hpp
#define __yas__detail__io__serialization_exceptions_hpp

#include <yas/detail/io/exception_base.hpp>

namespace yas {

/***************************************************************************/

__YAS_DECLARE_EXCEPTION_TYPE(serialization_exception)

struct no_json_key_exception: serialization_exception {
    using serialization_exception::serialization_exception;
};

/***************************************************************************/

#define __YAS_THROW_BAD_ARRAY_SIZE() \
	__YAS_THROW_EXCEPTION(::yas::serialization_exception, "bad array size");

#define __YAS_THROW_SPACE_IS_EXPECTED() \
	__YAS_THROW_EXCEPTION(::yas::serialization_exception, "space symbol is expected");

#define __YAS_THROW_BAD_SIZE_OF_ENUM() \
	__YAS_THROW_EXCEPTION(::yas::serialization_exception, "bad size of enum");

#define __YAS_THROW_BAD_BITSET_SIZE() \
	__YAS_THROW_EXCEPTION(::yas::serialization_exception, "bad bitset size");

#define __YAS_THROW_BAD_BITSET_STORAGE_SIZE() \
	__YAS_THROW_EXCEPTION(::yas::serialization_exception, "bad bitset storage size");

#define __YAS_THROW_BAD_SIZE_ON_DESERIALIZE(type) \
	__YAS_THROW_EXCEPTION(::yas::serialization_exception, "bad size on deserialize " type);

#define __YAS_THROW_IF_BAD_JSON_CHARS(ar, chars) { \
        char tmp[sizeof(chars)]; \
        ar.read(tmp, sizeof(tmp)-1); \
        if ( std::memcmp(tmp, chars, sizeof(chars)-1) != 0 ) { \
            __YAS_THROW_EXCEPTION(::yas::serialization_exception, "no expected chars '" chars "'"); \
        } \
    }

#define __YAS_THROW_NO_EXPECTED_JSON_KEY(msg) \
    __YAS_THROW_EXCEPTION(::yas::no_json_key_exception, msg);

#define __YAS_THROW_UNEXPECTED_JSON_KEY(msg) \
    __YAS_THROW_EXCEPTION(::yas::serialization_exception, msg);

#define __YAS_THROW_INVALID_JSON_STRING(msg) \
    __YAS_THROW_EXCEPTION(::yas::serialization_exception, msg);

#define __YAS_THROW_BASE64_ERROR(msg) \
    __YAS_THROW_EXCEPTION(::yas::serialization_exception, msg);

/***************************************************************************/

} // ns yas

#endif // __yas__detail__io__serialization_exceptions_hpp
