
// Copyright (c) 2010-2019 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__detail__tools__tuple_element_name_hpp
#define __yas__detail__tools__tuple_element_name_hpp

#include <cstdint>

namespace yas {
namespace detail {

/***************************************************************************/

template<char... Chars>
struct char_seq_to_c_str {
    static constexpr char pref[] = "item_";
    static constexpr std::size_t pref_size = sizeof(pref)-1;
    static constexpr char str[pref_size + sizeof...(Chars) + 1] = {
             pref[0]
            ,pref[1]
            ,pref[2]
            ,pref[3]
            ,pref[4]
            ,Chars...
            ,'\0'
    };
    typedef const char (&arr_type)[pref_size + sizeof...(Chars) + 1];
};
template<char... Chars>
constexpr char char_seq_to_c_str<Chars...>::str[];

template<std::size_t Q, std::size_t R, char ... C>
struct to_string_impl {
    using type = typename to_string_impl<Q / 10, Q % 10, R + '0', C...>::type;
};

template<std::size_t R, char... C>
struct to_string_impl<0, R, C...> {
    using type = char_seq_to_c_str<R + '0', C...>;
};

template<std::size_t T>
struct tuple_element_name {
    using type = typename to_string_impl<T / 10, T % 10>::type;
    static constexpr typename type::arr_type c_str() { return type::str; };
};

/***************************************************************************/

} // ns detail
} // ns yas

#endif // __yas__detail__tools__tuple_element_name_hpp
