
// Copyright (c) 2010-2019 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__detail__type_traits__typeinfo_hpp
#define __yas__detail__type_traits__typeinfo_hpp

#include <yas/detail/tools/fnv1a.hpp>

#include <cstdint>

namespace yas {
namespace typeinfo {

/***************************************************************************/

template<typename T>
struct typeinfo;

#define __YAS_DEFINE_TYPEINFO(t) \
    template<> \
    struct typeinfo<t> { \
        static constexpr const char name[]  = #t; \
        static constexpr std::size_t namelength = sizeof(name)-1; \
        static constexpr std::size_t size = sizeof(t); \
        static constexpr std::uint32_t hash = fnv1a(name); \
    };

__YAS_DEFINE_TYPEINFO(bool)
__YAS_DEFINE_TYPEINFO(char)
__YAS_DEFINE_TYPEINFO(std::int8_t)
__YAS_DEFINE_TYPEINFO(std::uint8_t)
__YAS_DEFINE_TYPEINFO(std::int16_t)
__YAS_DEFINE_TYPEINFO(std::uint16_t)
__YAS_DEFINE_TYPEINFO(std::int32_t)
__YAS_DEFINE_TYPEINFO(std::uint32_t)
__YAS_DEFINE_TYPEINFO(std::int64_t)
__YAS_DEFINE_TYPEINFO(std::uint64_t)
__YAS_DEFINE_TYPEINFO(float)
__YAS_DEFINE_TYPEINFO(double)

#undef __YAS_DEFINE_TYPEINFO

/***************************************************************************/

} // ns typeinfo
} // ns yas

#endif // __yas__detail__type_traits__typeinfo_hpp
