
// Copyright (c) 2010-2019 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__types__concepts__optional_hpp
#define __yas__types__concepts__optional_hpp

#include <yas/detail/type_traits/type_traits.hpp>
#include <yas/detail/type_traits/serializer.hpp>
#include <yas/detail/io/serialization_exceptions.hpp>

#include <yas/object.hpp>

namespace yas {
namespace detail {
namespace concepts {
namespace optional {

/***************************************************************************/

template<std::size_t F, typename Archive, template<typename> class Optional, typename T>
Archive& save(Archive &ar, const Optional<T> &opt) {
    const bool inited = __YAS_SCAST(bool, opt);
    __YAS_CONSTEXPR_IF ( F & yas::json ) {
        if ( inited ) {
            ar.write("[", 1);
            static const char obj[] = "{\"inited\":true},";
            ar.write(obj, sizeof(obj)-1);
            ar & YAS_OBJECT_NVP(nullptr, ("val", opt.value()));
            ar.write("]", 1);
        } else {
            static const char obj[] = "[{\"inited\":false}]";
            ar.write(obj, sizeof(obj)-1);
        }
    } else {
        ar.write(inited);
        if ( inited ) {
            ar & opt.value();
        }
    }

    return ar;
}

/***************************************************************************/

template<std::size_t F, typename Archive, template<typename> class Optional, typename T>
Archive& load(Archive &ar, Optional<T> &v) {
    __YAS_CONSTEXPR_IF ( F & yas::json ) {
        __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
            json_skipws(ar);
        }
        __YAS_THROW_IF_BAD_JSON_CHARS(ar, "[");
        bool inited = false;
        ar & YAS_OBJECT(nullptr, inited);
        if ( !inited ) {
            __YAS_THROW_IF_BAD_JSON_CHARS(ar, "]");

            v = Optional<T>();

            return ar;
        }
        __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
            json_skipws(ar);
        }
        __YAS_THROW_IF_BAD_JSON_CHARS(ar, ",");

        T val{};
        ar & YAS_OBJECT(nullptr, val);

        v = std::move(val);

        __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
            json_skipws(ar);
        }
        __YAS_THROW_IF_BAD_JSON_CHARS(ar, "]");
    } else {
        bool inited = false;
        ar.read(inited);
        if ( inited ) {
            T val{};
            ar & val;

            v = std::move(val);
        } else {
            v = Optional<T>();
        }
    }

    return ar;
}

/***************************************************************************/

} // ns optional
} // ns concepts
} // ns detail
} // ns yas

#endif // __yas__types__concepts__optional_hpp
