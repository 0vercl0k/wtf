
// Copyright (c) 2010-2019 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__types__boost__boost_container_static_vector_serializers_hpp
#define __yas__types__boost__boost_container_static_vector_serializers_hpp

#if defined(YAS_SERIALIZE_BOOST_TYPES)
#include <yas/detail/type_traits/type_traits.hpp>
#include <yas/detail/type_traits/serializer.hpp>
#include <yas/detail/io/serialization_exceptions.hpp>
#include <yas/types/concepts/array.hpp>

#include <boost/container/static_vector.hpp>

namespace yas {
namespace detail {

/***************************************************************************/

template<std::size_t F, typename T, std::size_t N>
struct serializer<
	type_prop::not_a_fundamental,
	ser_case::use_internal_serializer,
	F,
	boost::container::static_vector<T, N>
> {
	template<typename Archive>
	static Archive& save(Archive &ar, const boost::container::static_vector<T, N> &vector) {
		__YAS_CONSTEXPR_IF ( F & yas::json ) {
            ar.write("[", 1);
            ar & YAS_OBJECT_NVP(
                 nullptr
                ,("capacity", N)
                ,("size", vector.size())
            );
            ar.write(",{\"val\":", 8);
            concepts::array::save<F>(ar, vector);
            ar.write("}]", 2);
        } else {
            ar.write_seq_size(N);
            ar.write_seq_size(vector.size());
            __YAS_CONSTEXPR_IF ( can_be_processed_as_byte_array<F, T>::value ) {
                ar.write(vector.data(), sizeof(T) * vector.size());
            } else {
                for ( const auto &it: vector ) {
                    ar & it;
                }
            }
        }

		return ar;
	}

	template<typename Archive>
	static Archive& load(Archive &ar, boost::container::static_vector<T, N> &vector) {
        __YAS_CONSTEXPR_IF ( F & yas::json ) {
            __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                json_skipws(ar);
            }
            __YAS_THROW_IF_BAD_JSON_CHARS(ar, "[");
            std::size_t capacity=0, size=0;
            ar & YAS_OBJECT(nullptr, capacity, size);
            if ( capacity != N || size > N ) { __YAS_THROW_BAD_ARRAY_SIZE(); }
            __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                json_skipws(ar);
            }
            __YAS_THROW_IF_BAD_JSON_CHARS(ar, ",");
            __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                json_skipws(ar);
            }
            __YAS_THROW_IF_BAD_JSON_CHARS(ar, "{");
            __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                json_skipws(ar);
            }
            __YAS_THROW_IF_BAD_JSON_CHARS(ar, "\"val\":");
            __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                json_skipws(ar);
            }
            concepts::array::load<F>(ar, vector);
            __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                json_skipws(ar);
            }
            __YAS_THROW_IF_BAD_JSON_CHARS(ar, "}");
            __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                json_skipws(ar);
            }
            __YAS_THROW_IF_BAD_JSON_CHARS(ar, "]");
        } else {
            const std::size_t capacity = ar.read_seq_size();
            const std::size_t size = ar.read_seq_size();
            if ( capacity != N || size > N ) { __YAS_THROW_BAD_ARRAY_SIZE(); }
            vector.resize(size);
            __YAS_CONSTEXPR_IF ( can_be_processed_as_byte_array<F, T>::value ) {
                ar.read(vector.data(), sizeof(T) * size);
            } else {
                for ( auto &it: vector ) {
                    ar & it;
                }
            }
        }

		return ar;
	}
};

/***************************************************************************/

} // namespace detail
} // namespace yas

#endif // defined(YAS_SERIALIZE_BOOST_TYPES)

#endif // __yas__types__boost__boost_container_static_vector_serializers_hpp
