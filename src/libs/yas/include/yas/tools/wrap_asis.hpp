
// Copyright (c) 2010-2021 niXman (github dot nixman at pm dot me). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__tools__wrap_asis_hpp
#define __yas__tools__wrap_asis_hpp

#include <yas/detail/type_traits/type_traits.hpp>

namespace yas {

/***************************************************************************/

template<typename T>
struct asis_wrapper {
    template<typename VT>
    struct real_value_type {
        using type = typename std::conditional<
             std::is_array<typename std::remove_reference<VT>::type>::value
            ,typename std::remove_cv<VT>::type
            ,typename std::conditional<
                 std::is_lvalue_reference<VT>::value
                ,VT
                ,typename std::decay<VT>::type
            >::type
        >::type;
    };
    using value_type = typename real_value_type<T>::type;

    asis_wrapper(const asis_wrapper &) = delete;
    asis_wrapper& operator=(const asis_wrapper &) = delete;
    constexpr asis_wrapper(T &&v) noexcept
        :val{std::forward<T>(v)}
    {}
    constexpr asis_wrapper(asis_wrapper &&r) noexcept
        :val{std::forward<value_type>(r.val)}
    {}

    value_type val;
};

template<typename T>
asis_wrapper<T> asis(T &&val) {
    return {std::forward<T>(val)};
}

/***************************************************************************/

} // namespace yas

#endif // __yas__tools__wrap_asis_hpp
