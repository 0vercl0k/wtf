
// Copyright (c) 2010-2019 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__null_streams_hpp
#define __yas__null_streams_hpp

#include <yas/detail/config/config.hpp>
#include <yas/detail/tools/cast.hpp>
#include <yas/detail/tools/noncopyable.hpp>
#include <yas/detail/type_traits/type_traits.hpp>
#include <yas/buffers.hpp>

#include <cmath>
#include <cstring>

namespace yas {

/***************************************************************************/

struct null_ostream {
    YAS_NONCOPYABLE(null_ostream)
    YAS_MOVABLE(null_ostream)

    null_ostream()
    {}

    template<typename T>
    std::size_t write(const T *tptr, const std::size_t size) {
        (void)tptr;
        return size;
    }

    shared_buffer get_shared_buffer() const { return shared_buffer(nullptr, 0); }
    intrusive_buffer get_intrusive_buffer() const { return intrusive_buffer(nullptr, 0); }
}; // struct null_ostream

/***************************************************************************/

struct null_istream {
    YAS_NONCOPYABLE(null_istream)
    YAS_MOVABLE(null_istream)

    null_istream(const void *ptr, std::size_t size)
    { (void)ptr; (void)size; }
    null_istream(const intrusive_buffer &buf)
    { (void)buf; }
    null_istream(const shared_buffer &buf)
    { (void)buf; }

    template<typename T>
    std::size_t read(T *ptr, const std::size_t size) {
        (void)ptr;
        return size;
    }

    bool empty() const { return true; }
    char peekch() const { return 0; }
    char getch() { return 0; }
    void ungetch(char) {}

    shared_buffer get_shared_buffer() const { return shared_buffer(nullptr, 0); }
    intrusive_buffer get_intrusive_buffer() const { return intrusive_buffer(nullptr, 0); }
}; // struct null_istream

/***************************************************************************/

} // ns yas

#endif // __yas__null_streams_hpp
