
// Copyright (c) 2010-2019 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <yas/mem_streams.hpp>
#include <yas/binary_iarchive.hpp>
#include <yas/binary_oarchive.hpp>

#undef NDEBUG
#include <cassert>

/***************************************************************************/

int main() {
    char w0=33, r0=0;
    int w1=44, r1=0;
    float w2=3.14156, r2=0;
    double w3=3.14156259, r3=0;

    {
        yas::mem_ostream os;
        yas::binary_oarchive<yas::mem_ostream> oa(os);

        auto oo = YAS_OBJECT_NVP(
            "vars"
            ,("v0", w0)
            ,("v1", w1)
            ,("v2", w2)
            ,("v3", w3)
        );
        oa.serialize(oo);

        yas::mem_istream is(os.get_intrusive_buffer());
        yas::binary_iarchive<yas::mem_istream> ia(is);

        auto io = YAS_OBJECT_NVP(
            "vars"
            ,("v0", r0)
            ,("v1", r1)
            ,("v2", r2)
            ,("v3", r3)
        );
        ia.serialize(io);

        // TODO: stackoverflow.com/questions/17333
        assert(r0 == w0 && r1 == w1 && r2 == w2 && r3 == w3);
    }

    r0=0;r1=0;r2=0;r3=0;
    {
        yas::mem_ostream os;
        yas::binary_oarchive<yas::mem_ostream> oa(os);

        auto oo = YAS_OBJECT_NVP(
            "vars"
            ,("v0", w0)
            ,("v1", w1)
            ,("v2", w2)
            ,("v3", w3)
            );
        oa(oo);

        yas::mem_istream is(os.get_intrusive_buffer());
        yas::binary_iarchive<yas::mem_istream> ia(is);

        auto io = YAS_OBJECT_NVP(
            "vars"
            ,("v0", r0)
            ,("v1", r1)
            ,("v2", r2)
            ,("v3", r3)
        );
        ia(io);

        // TODO: stackoverflow.com/questions/17333
        assert(r0 == w0 && r1 == w1 && r2 == w2 && r3 == w3);
    }
}

/***************************************************************************/
