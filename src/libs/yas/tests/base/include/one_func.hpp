
// Copyright (c) 2010-2019 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__tests__base__include__one_function_hpp
#define __yas__tests__base__include__one_function_hpp

/***************************************************************************/

namespace onet_func_test {

bool _flag = false;

struct type {
	type()
        :x{}
        ,y{}
	{}

	int x;
	int y;
};

} // ns

namespace yas {

template<typename Archive>
void serialize(Archive& ar, onet_func_test::type& t) {
    auto o0 = YAS_OBJECT_NVP("type", ("x", t.x), ("y", t.y));
	ar & o0;

    onet_func_test::_flag = true;
}

} // namespace yas

template<typename archive_traits>
bool one_function_test(std::ostream &log, const char *archive_type, const char *test_name) {
    onet_func_test::type type, type2;
	type.x = 33; type.y = 44;

	typename archive_traits::oarchive oa;
	archive_traits::ocreate(oa, archive_type);
	oa & type;

	if ( !onet_func_test::_flag ) {
		YAS_TEST_REPORT(log, archive_type, test_name);
		return false;
	}

    onet_func_test::_flag = false;

	typename archive_traits::iarchive ia;
	archive_traits::icreate(ia, oa, archive_type);
    ia & type2;

	if ( !onet_func_test::_flag ) {
		YAS_TEST_REPORT(log, archive_type, test_name);
		return false;
	}

	if ( type.x != type2.x || type.y != type2.y ) {
		YAS_TEST_REPORT(log, archive_type, test_name);
		return false;
	}

	return true;
}

/***************************************************************************/

#endif // __yas__tests__base__include__one_function_hpp
