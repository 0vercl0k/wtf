
// Copyright (c) 2010-2019 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__tests__base__include__serialize_hpp
#define __yas__tests__base__include__serialize_hpp

#include <fstream>
#include <yas/serialize.hpp>

template<typename archive_traits>
bool serialize_test(std::ostream &log, const char *archive_type, const char *test_name) {
    const int i=33;
    int i2{};
    const double d = 3.14;
    double d2{};
    const std::string s = "some string";
    std::string s2{};

    const auto o0 = YAS_OBJECT_NVP(
         "obj"
        ,("i", i)
        ,("d", d)
        ,("s", s)
    );

    {
        // mem

        i2 = 0;
        d2 = 0;
        s2.clear();

        const auto buf = yas::save<yas::mem|yas::json>(o0);
        yas::load<yas::mem|yas::json>(
             buf
            ,YAS_OBJECT_NVP(
                "obj"
                ,("i", i2)
                ,("d", d2)
                ,("s", s2)
            )
        );
        if ( i != i2 || d != d2 || s != s2 ) {
            YAS_TEST_REPORT(log, archive_type, test_name);
            return false;
        }
    }

    {
        // file name

        i2 = 0;
        d2 = 0;
        s2.clear();

        const char *fname = "file.bin";
        std::remove(fname);

        yas::save<yas::file|yas::json>(fname, o0);
        yas::load<yas::file|yas::json>(
             fname
            ,YAS_OBJECT_NVP(
                "obj"
                ,("i", i2)
                ,("d", d2)
                ,("s", s2)
            )
        );
        if ( i != i2 || d != d2 || s != s2 ) {
            YAS_TEST_REPORT(log, archive_type, test_name);
            return false;
        }
    }

    {
        // yas::file_ostream/yas::file_istream

        i2 = 0;
        d2 = 0;
        s2.clear();

        const char *fname = "file.txt";
        std::remove(fname);

        yas::file_ostream os(fname);
        yas::save<yas::file|yas::json>(os, o0);
        os.flush();

        yas::file_istream is(fname);
        yas::load<yas::file|yas::json>(
             is
            ,YAS_OBJECT_NVP(
                "obj"
                ,("i", i2)
                ,("d", d2)
                ,("s", s2)
            )
        );
        if ( i != i2 || d != d2 || s != s2 ) {
            YAS_TEST_REPORT(log, archive_type, test_name);
            return false;
        }
    }

    {
        // std::ofstream/std::ifstream
        i2 = 0;
        d2 = 0;
        s2.clear();

        const char *fname = "file.txt";
        std::remove(fname);

        std::ofstream ostream(fname, std::ios::binary);
        yas::std_ostream_adapter os(ostream);
        yas::save<yas::file|yas::json>(os, o0);
        ostream.close();

        std::ifstream istream(fname, std::ios::binary);
        yas::std_istream_adapter is(istream);
        yas::load<yas::file|yas::json>(
             is
            ,YAS_OBJECT_NVP(
                "obj"
                ,("i", i2)
                ,("d", d2)
                ,("s", s2)
            )
        );
        if ( i != i2 || d != d2 || s != s2 ) {
            YAS_TEST_REPORT(log, archive_type, test_name);
            return false;
        }
    }

    return true;
}

#endif // __yas__tests__base__include__serialize_hpp
