
// Copyright (c) 2010-2019 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__tests__base__include__serialization_hpp
#define __yas__tests__base__include__serialization_hpp

template<typename archive_traits>
bool serialization_test(std::ostream &log, const char *archive_type, const char *test_name) {
	int w0=0, w1=1, w2=2, w3=3;
	int r0=0, r1=0, r2=0, r3=0;

	typename archive_traits::oarchive oa;
	archive_traits::ocreate(oa, archive_type);
	oa.serialize(YAS_OBJECT_NVP("obj", ("v0", w0), ("v1", w1), ("v2", w2), ("v3", w3)));

	typename archive_traits::iarchive ia;
	archive_traits::icreate(ia, oa, archive_type);
	ia.serialize(YAS_OBJECT_NVP("obj", ("v0", r0), ("v1", r1), ("v2", r2), ("v3", r3)));

	if ( r0!=w0 || r1!=w1 || r2!=w2 || r3!=w3) {
		YAS_TEST_REPORT(log, archive_type, test_name);
		return false;
	}

	r0=0,r1=0,r2=0,r3=0;
	typename archive_traits::oarchive oa2;
	archive_traits::ocreate(oa2, archive_type);
	oa2(YAS_OBJECT_NVP("obj", ("v0", w0), ("v1", w1), ("v2", w2), ("v3", w3)));

	typename archive_traits::iarchive ia2;
	archive_traits::icreate(ia2, oa2, archive_type);
	ia2(YAS_OBJECT_NVP("obj", ("v0", r0), ("v1", r1), ("v2", r2), ("v3", r3)));

	if ( r0!=w0 || r1!=w1 || r2!=w2 || r3!=w3) {
		YAS_TEST_REPORT(log, archive_type, test_name);
		return false;
	}


	r0=0,r1=0,r2=0,r3=0;
	typename archive_traits::oarchive oa3;
	archive_traits::ocreate(oa3, archive_type);
	oa3.save(YAS_OBJECT_NVP("obj", ("v0", w0), ("v1", w1), ("v2", w2), ("v3", w3)));

	typename archive_traits::iarchive ia3;
	archive_traits::icreate(ia3, oa3, archive_type);
	ia3.load(YAS_OBJECT_NVP("obj", ("v0", r0), ("v1", r1), ("v2", r2), ("v3", r3)));

	if ( r0!=w0 || r1!=w1 || r2!=w2 || r3!=w3) {
		YAS_TEST_REPORT(log, archive_type, test_name);
		return false;
	}

	// null streams compilation test
    {
        try {
            yas::null_ostream binary_os;
            yas::binary_oarchive<yas::null_ostream> binary_oa(binary_os);
            yas::null_istream binary_is(binary_os.get_intrusive_buffer());
            yas::binary_iarchive<yas::null_istream> binary_ia(binary_is);
        } catch (const yas::io_exception &) {
        }

        try {
            yas::null_ostream text_os;
            yas::text_oarchive<yas::null_ostream> text_oa(text_os);
            yas::null_istream text_is(text_os.get_intrusive_buffer());
            yas::text_iarchive<yas::null_istream> text_ia(text_is);
        } catch (const yas::io_exception &) {
        }

        yas::null_ostream json_os;
        yas::json_oarchive<yas::null_ostream> json_oa(json_os);
        yas::null_istream json_is(json_os.get_intrusive_buffer());
        yas::json_iarchive<yas::null_istream> json_ia(json_is);
    }

	return true;
}

#endif // __yas__tests__base__include__serialization_hpp
