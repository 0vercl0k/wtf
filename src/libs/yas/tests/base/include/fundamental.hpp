
// Copyright (c) 2010-2019 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__tests__base__include__pod_hpp
#define __yas__tests__base__include__pod_hpp

/***************************************************************************/

template<typename archive_traits>
bool fundamental_test(std::ostream &log, const char *archive_type, const char *test_name) {
    typename archive_traits::oarchive oa;
    archive_traits::ocreate(oa, archive_type);

    bool b = true, b2{};
    std::int8_t c = '1', c2{};
    std::uint8_t uc = '2', uc2{};
    std::int16_t s = 3, s2{};
    std::uint16_t us = 4, us2{};
    std::int32_t i = 5, i2{};
    std::uint32_t l = 6, l2{};
    std::int64_t i64 = 7, i642{};
    std::uint64_t u64 = 8, u642{};
    std::uint64_t u64x = 25951127024343977ull, u64x2{};

    std::int64_t i64max = std::numeric_limits<std::int64_t>::max(), i64max2{};
    std::uint64_t u64max = std::numeric_limits<std::uint64_t>::max(), u64max2{};

    float f = 3.14f, f2{};
    double d = 3.14, d2{};

    enum {
        binary_expected_size =
             sizeof(b)
            +sizeof(c)
            +sizeof(uc)
            +sizeof(s)
            +sizeof(us)
            +sizeof(i)
            +sizeof(l)
            +sizeof(i64)
            +sizeof(u64)
            +sizeof(f)
            +sizeof(d)
            +sizeof(u64x)
            +sizeof(i64max)
            +sizeof(u64max)
        ,binary_compacted_expected_size = 47
        ,text_expected_size = 97
        ,json_expected_size = 181
    };

    auto o0 = YAS_OBJECT(
         nullptr
        ,b
        ,c
        ,uc
        ,s
        ,us
        ,i
        ,l
        ,i64
        ,u64
        ,f
        ,d
        ,u64x
        ,i64max
        ,u64max
    );
    oa & o0;

    switch ( archive_traits::oarchive_type::type() ) {
        case yas::binary: {
            std::size_t exp_size = archive_traits::oarchive_type::header_size() + binary_expected_size;
            std::size_t comp_exp_size = archive_traits::oarchive_type::header_size() + binary_compacted_expected_size;
            const std::size_t current_size = oa.size();
            if ( current_size != (archive_traits::oarchive_type::compacted() ? comp_exp_size : exp_size) ) {
                YAS_TEST_REPORT(log, archive_type, test_name);
                return false;
            }
        } break;
        case yas::text: {
            if ( oa.size() != archive_traits::oarchive_type::header_size() + text_expected_size ) {
                YAS_TEST_REPORT(log, archive_type, test_name);
                return false;
            }
        } break;
        case yas::json: {
            if ( oa.size() != archive_traits::oarchive_type::header_size() + json_expected_size ) {
                YAS_TEST_REPORT(log, archive_type, test_name);
                return false;
            }
        } break;
        default:
            YAS_TEST_REPORT(log, archive_type, test_name);
            return false;
    }

    {
        typename archive_traits::iarchive ia;
        archive_traits::icreate(ia, oa, archive_type);

        auto i0 = YAS_OBJECT_NVP(
             nullptr
            ,("b", b2)
            ,("c", c2)
            ,("uc", uc2)
            ,("s", s2)
            ,("us", us2)
            ,("i", i2)
            ,("l", l2)
            ,("i64", i642)
            ,("u64", u642)
            ,("f", f2)
            ,("d", d2)
            ,("u64x", u64x2)
            ,("i64max", i64max2)
            ,("u64max", u64max2)
        );
        ia & i0;

        if ( b != b2 || c != c2 || uc != uc2 || s != s2 || us != us2 || i != i2
             || l != l2 || i64 != i642 || u64 != u642 || f != f2 || d != d2
             || u64x != u64x2 || i64max != i64max2 || u64max != u64max2 )
        {
            YAS_TEST_REPORT(log, archive_type, test_name);
            return false;
        }
    }

    return true;
}

/***************************************************************************/

#endif // __yas__tests__base__include__pod_hpp
