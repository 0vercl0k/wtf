name: Build

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  Windows:
    runs-on: windows-latest
    strategy:
      fail-fast: true
      matrix:
        generator: [ 'ninja', 'msvc' ]

    name: windows-latest / ${{ matrix.generator }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Setup vs prompt
      uses: ilammy/msvc-dev-cmd@v1

    - name: Build with Ninja/cl
      shell: cmd
      working-directory: src/build
      if: matrix.generator == 'ninja'
      run: build-release.bat

    - name: Build with msvc
      shell: cmd
      working-directory: src/build
      if: matrix.generator == 'msvc'
      run: build-release-msvc.bat

    - name: Copy dbghelp/symsrv
      if: matrix.generator == 'ninja'
      run: |
        foreach ($file in "dbghelp", "dbgeng", "dbgcore", "symsrv") {
            Copy-Item -Path "C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\$file.dll" -Destination "src\build"
        }

    - name: Upload artifacts
      if: matrix.generator == 'ninja'
      uses: actions/upload-artifact@v4
      with:
        name: bin-win64.RelWithDebInfo
        path: |
          src/build/wtf.exe
          src/build/wtf.pdb
          src/build/dbghelp.dll
          src/build/dbgeng.dll
          src/build/dbgcore.dll
          src/build/symsrv.dll

  linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        compiler: [ 'clang', 'gcc' ]

    name: ubuntu-latest / ${{ matrix.compiler }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Installing dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y g++-10 ninja-build
        sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"

    - name: Build with gcc
      working-directory: src/build
      if: matrix.compiler == 'gcc'
      env:
        CC: gcc-10
        CXX: g++-10
      run: ./build-release.sh

    - name: Build with clang
      working-directory: src/build
      if: matrix.compiler == 'clang'
      env:
        CC: clang-18
        CXX: clang++-18
      run: ./build-release.sh

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bin-linux-amd64-${{ matrix.compiler }}.Release
        path: src/build/wtf
